CLASS:: CVWidget
summary:: The abstract superclass for all CVWidgets
categories:: GUI, Conductor, External Control>MIDI, External Control>OSC
related:: Classes/CVCenter, Classes/CV, Classes/CVWidgetKnob, Classes/CVWidget2D, Classes/CV, Classes/CCResponder, Classes/OSCresponderNode, Classes/ControlSpec, Classes/SimpleController

DESCRIPTION::
CVWidget is the abstract superclass of all CVWidgets (currently: link::Classes/CVWidgetKnob:: and link::Classes/CVWidget2D::). However, it implements a couple of useful methods that are common to all its subclasses.

CLASSMETHODS::

METHOD:: removeResponders
A link::Classes/Boolean::, indicating whether MIDI- and OSC-responders shall be removed upon hitting Cmd/Ctrl-period. If it is set to code::false:: unreferenced ghost-responders are left that may be hard to remove.

returns:: code::this:: (CVWidget)

METHOD:: debug
A link::Classes/Boolean::, allowing (or disallowing) introspection of the internal working of a CVWidget. This is e.g. useful if the user wants to extend the widget's API. Whenever a the content of a model changes the corresponding controller gets triggered and executes its actions. So, if a message like

code::widget 'freq' (CVWidget2D) at slot 'lo' midiDisplay.model: `(( 'learn': L, 'src': source, 'chan': chan, 'ctrl': ctrl ))::

gets posted, it means the midiDisplay.controller has just executed its actions using the model's values.

Also see link::#Models and Controllers, internal bookkeeping:: and link::#Extending the API::.

returns:: code::this:: (CVWidget)

INSTANCEMETHODS::

METHOD:: setup
The current widget-setup, returned as an link::Classes/Event::. If the widget is a link::Classes/CVWidget2D:: each key of the returned Event will be split in a code::\lo:: and a code::\hi:: value:
definitionList::
	## midiMode || as set by link::#-setMidiMode::. default: code::0::
	## calibrate || indicates whether OSC-calibration is active or not, set by link::#-setCalibrate::. default: code::true::
	## ctrlButtonBank || indicates whether the code::ctrlButtonBank:: parameter, reflecting a MIDI-device's bank-layout is set. This can be set with link::#-setCtrlButtonBank::. default: code::nil::
	## midiMean || if a MIDI-device is set to in-/decremental mode reps. code::midiMode:: is set to code::1:: this will be the mean output-value. Can be set with link::#-setMidiMean::. default: code::64::
	## midiResolution || if code::midiMode:: is set to code::1:: the step-size of each slider is determined by this parameter. Can be set with link::#-setMidiResolution::. default: code::1::
	## softWithin || if code::midiMode:: is set to code::0:: this determines the tolerance at which a MIDI-slider will respond when moved. For a more detailed explanation see link::#-setSoftWithin::. default: code::0.1::
::

returns:: an link::Classes/Event::

METHOD:: setMidiMode
Different MIDI-devices may have different output modes: either values from 0-127 or an in-/decremental value (e.g. -1 or +1). These modes may be taken in account as follows:

table::
	## code::0:: || the device outputs a values 0-127
	## code::1:: || the device outputs in-/decremental values
::

argument:: mode
an link::Classes/Integer::

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: getMidiMode
Get the current midiMode (0 or 1).

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: an link::Classes/Integer::

METHOD:: setMidiMean
Devices which output a in-/decremental may output a standard value + in-/decrement. code::midiMean:: gets automatically subtracted from this value, so in-/decrement remains. Applies only if midiMode is set to code::1::.

argument:: meanval
an link::Classes/Integer::. default: code::64::

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns::  the receiver

METHOD:: getMidiMean
Get the current midiMean value.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: an link::Classes/Integer::

METHOD:: setSoftWithin
If code::midiMode:: has been set to code::0:: moving a widget-slider will set the CV to a new value. However, if a MIDI-slider is connected to that widget, moving the MIDI-slider will set the CV's value immediatly to the value that is stored in the MIDI-slider i.e. a "jump" will happen. code::softWithin:: will ease this behavior by setting the CV's value only if the slider gets within code::softWithin/2::. Applies only if midiMode is set to code::0::.

argument:: threshold
a link::Classes/Float:: - default: code::0.1::.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns::  the receiver

METHOD:: getSoftWithin
Get the current softWithin value.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: a link::Classes/Float::

METHOD:: setCtrlButtonBank
Some MIDI-devices provide several banks of sliders. I.e. a device may be equipped with 16 sliders and 4 banks that can be switched. So, slider 1 in bank 2 is slider nr. 17, slider 3 in bank 3 is slider nr. 35. By default these sliders would have to be addressed in a link::Classes/CCResponder:: as 16 (slider 17) and 34 (slider 35) which makes it hard to immediately get the right slider from what is displayed within the GUI.
code::ctrlButtonBank:: translates the hardware-layout in a way that makes it easy to see the slider's bank and number: slider 17 becomes 2:1 (bank 2,  nr. 1).

argument:: numSliders
an link::Classes/Integer::, representing the number of sliders in one bank.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: getCtrlButtonBank
Get the current ctrlButtonBank value

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: an link::Classes/Integer::, representing the number of sliders in one bank.

METHOD:: setMidiResolution
If code::midiMode:: has been set to 1 (by calling link::#-setMidiMode::), this method allows to set the resolution (= stepsize) of the connected hardware MIDI-sliders.

argument:: resolution
a link::Classes/Float::, representing the stepsize:

lower values -> higher resolution

higher values -> lower resolution

default: code::1::

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: getMidiResolution
Get the current value midiResolution value.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns::  a link::Classes/Float::

METHOD:: setCalibrate
Unlike MIDI the range of incoming OSC-values isn't 0-127 - it is unknown at the time of initialization of the OSC-responder. All CVWidgets have an inbuilt calibration mechanism that determines the range automatically. At initialization the range is set to [0.0001, 0.0001]. If the mechanism detects a value that is lower or higher than the values set at initialization it will set the constraints accordingly. This method allows to stop or start the calibration-process.

argument:: bool
a link::Classes/Boolean::, indicating whether the calibration-process shall be started or stopped.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: getCalibrate
Get the current calibration-status

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: a link::Classes/Boolean::

METHOD:: setSpec
Every CVWidget wraps one or more link::Classes/CV::s whose internal spec can be set with this method.

argument:: spec
can either be:
list::
	## a link::Classes/ControlSpec::
	## an link::Classes/Array:: that can be converted to a valid ControlSpec by calling code::asSpec:: on it
	## a link::Classes/Symbol:: representing the name of a valid ControlSpec (e.g. code::\freq::)
::

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: getSpec
Get the current spec of the widget's link::Classes/CV::.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: a link::Classes/ControlSpec::

METHOD:: setOscMapping
Within an link::Classes/OSCresponder::'s function values coming in are being mapped to the link::Classes/ControlSpec::'s range, defined by its code::minval:: and code::maxval::. Furthermore a spec may implement a non-linear code::warp:: for the transition from code::minval:: to code::maxval::. Especially when work with accelerometers and orientation-sensors setting oscMapping to some non-linear mode will allow a much more fine-grained control.

argument:: mapping
a link::Classes/Symbol:: - can be:
list::
	## code::\linlin:: - linear to linear mapping
	## code::\linexp:: - linear to exponential mapping
	## code::\explin:: - exponential to linear mapping
	## code::\expexp:: - exponential to exponential mapping
::

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: getOscMapping
Get the current oscMapping-mode

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns::  a link::Classes/Symbol::, indicating the oscMapping-mode

METHOD:: oscConnect
Connect a widget to an OSC-device resp. a program that sends OSC-messages to SuperCollider

argument:: ip
optional - if set the link::Classes/OSCresponder:: will only listen to messages coming from that IP-address.

argument:: port
optional - if set the link::Classes/OSCresponder:: will only listen to messages coming from that port.

argument:: name
a link::Classes/String:: or a link::Classes/Symbol::\: The OSC-command-name to which the OSCresponder will listen. E.g. code::'/touch/x':: or code::'/accelerometer/x'::. Every widget has an inbuilt mechanism that allows the user to scan connected devices for possible command-names. This mechanism is implemented in the class code::OSCCommands:: which may not only be used in connection with CVWidgets. code::OSCCommands:: stores a list of devices and commands to disk so the user does not have to rescan every time (s)he restarts SC.

argument:: oscMsgIndex
messages you receive from an OSC-device/-program usually consist of the commend-name and one or more slots, containing numerical values. An orientation-sensor might e.g. send a message like the following:

code:: [ '/orientation', 178, 67, 78 ]::

the first slot is the command-name and the subsequent slots are code::x::, code::y:: and code::z::. code::oscMsgIndex:: allows you to select which of those three values you want to use in your widget.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: oscDisconnect
Disconnects the OSC-device/-application reps. removes the link::Classes/OSCresponder::

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: midiConnect
Connect a widget to a MIDI-device utilizing a link::Classes/CCResponder::.

argument:: uid
optional - the ID under which the device gets registered in SuperCollider

argument:: chan
optional - the MIDI-channel to which the program will listen

argument:: num
optional - the controller-number to which the program will listen

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: midiDisconnect
Terminate a MIDi-connection reps. remove the link::Classes/CCResponder::.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: setOscInputConstraints
Any widget has a mechanism built in that is supposed to detect the constraints of the values coming in via OSC. However, you my set these constraints manually as well with this method.

argument:: constraintsHiLo
a link::Classes/Point:: - e.g. code::Point(-20, 20):: or code::0@360::

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: getOscInputConstraints
Get the current oscInputConstraints. This will return code::nil:: as the widget is not connected and the calibration-mechanism hasn't set any values.

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: code::nil:: or an link::Classes/Event:: containing the constraints in the keys code::\lo:: and code::\hi:: (not related to the \lo and \hi keys in a link::Classes/CVWidget2D::)

METHOD:: addAction
Add an action to the widget's link::Classes/CV::.

argument:: name
a link::Classes/Symbol:: or a link::Classes/String::, representing the name under which the action will be stored

argument:: action
a code::Function:: or a link::Classes/String:: that compiles to one if code::interpret:: is called on it. If the function contains an argument the link::Classes/CV:: will be provided in this argument:
code::{ |cv| "the CV's current value is %\n".postf(cv.value) }::

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

argument:: active
a link::Classes/Boolean::, indicating whether the action shall become active immediatly

returns:: the receiver

METHOD:: removeAction
Remove an action given by its name

argument:: name
a link::Classes/Symbol:: or a link::Classes/String::, representing the action's name

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

METHOD:: activateAction
Activate or deactivate a stored action

argument:: name
a link::Classes/Symbol:: or a link::Classes/String::, representing the action's name

argument:: activate
a link::Classes/Boolean::, indicating whether the action shall be activated or deactivated

argument:: slot
only needed if the widget is a link::Classes/CVWidget2D:: - either code::\lo:: or code::\hi::

returns:: the receiver

subsection:: Models and Controllers, internal bookkeeping

METHOD:: wdgtControllersAndModels
CVWidgets are designed in an MVC-architecture (MVC = "model - view - controller"). Any time a new CVWidget gets instantiated the models get initialized. Any time the model is changed the function in the regarding controller gets invoked.

warning:: Do not try to change the models directly, e.g. by doing something like

code::myWidget.wdgtControllersAndModels.someModel = someValue::

Models are designed for internal bookkeeping and all methods within CVWidget are supposed to do the right thing with them.
::

All models and controllers are stored within the wdgtControllersAndModels instance-var. If the widget is a link::Classes/CVWidget2D:: wdgtControllersAndModels will be split up in a code::\lo:: and a code::\hi:: slot, each containing the following models ( link::Classes/CVWidgetKnob:: simply keeps  them under wdgtControllersAndModels):

definitionList::
	## calibrate || the current calibration-state as set with link::#-setCalibrate:: - either code::Ref(true):: (default at initialization) or code::Ref(false)::.
	## cvSpec || the link::Classes/CV::'s current spec as set at initialization or with code::setSpec:: - a link::Classes/Ref:: to a link::Classes/ControlSpec::.
	## oscInputRange || the current input-range, set by the widget's input mechanism with code::setInputRange:: - default at initialization: code::Ref([0.0001, 0.0001])::.
	## oscConnection || the current OSC-connection (if present): code::Ref([<IP-address>, <port>, <command-name>, <message-index>])::. If no connection is present it will be code::Ref(false)::.
	## oscDisplay || stores all OSC-related visual properties of a widget and its editor. A link::Classes/Ref:: to an link::Classes/Event::, containing the following slots:
	list::
		## strong::but::: the state of the OSC-button ("edit OSC")
		## strong::ipField::: the IP-field under the OSC-tab of the editor (see link::Classes/CVWidgetEditor::)
		## strong::portField::: the port-field under the OSC-tab of the editor (see link::Classes/CVWidgetEditor::)
		## strong::nameField::: the field for the OSC-command-name under the OSC-tab of the editor (see link::Classes/CVWidgetEditor::)
		## strong::index::: the field for the message-index under the OSC-tab of the editor (see link::Classes/CVWidgetEditor::)
		## strong::connectorButVal::: the value of the connect-button under the OSC-tab of the editor connectorButVal (see link::Classes/CVWidgetEditor::)
		## strong::editEnabled::: if a connection is established editor-fields will be made uneditable and this slot is set to code::false::
	::
	## midiConnection || the currentMIDI-connection (if present): code::Ref((src\: <val>, chan\: <val>, num\: <val>))::. If no connection is present this will be: code::Ref(nil)::.
	## midiDisplay || stores all MIDI-related visual properties of a widget and its editor. A link::Classes/Ref:: to an link::Classes/Event::, containing the following slots:
	list::
		## strong::learn::: the current state of the 'learn'-button of the widget and the 'learn'-button under the MIDI-tab of the editor
		## strong::src::: the current string of the 'src'-field of the widget and the 'src'-field under the MIDI-tab of the editor (the ID under which the device gets registered in SC)
		## strong::chan::: the current string of the 'chan'-field of the widget and the 'chan'-field under the MIDI-tab of the editor (the MIDI-channel)
		## strong::ctrl::: the current string of the 'ctrl'-field of the widget and the 'ctrl'-field under the MIDI-tab of the editor (the controller-number of the device)
	::
	## midiOptions || the current MIDI-setup, analogue to link::#-setup:::
	list::
		## strong::midiMode::: the current code::midiMode:: - see also link::#-setMidiMode::
		## strong::midiMean::: the current code::midiMean:: - see also link::#-setMidiMean::
		## strong::ctrlButtonBank::: the current value for code::ctrlButtonBank:: - see also link::#-setCtrlButtonBank::
		## strong::midiResolution::: the current code::midiResolution:: - see also link::#-setMidiResolution::
		## strong::softWithin::: the current value for code::softWithin:: - see also link::#-setSoftWithin::
	::
	## mapConstrainterLo || a link::Classes/CV::, containing the spec code::[-inf, inf].asSpec:: and code::oscInputRange.model.value[0]:: as value
	## mapConstrainterHi || a link::Classes/CV::, containing the spec code::[-inf, inf].asSpec:: and code::oscInputRange.model.value[1]:: as value
	## actions || a link::Classes/Ref:: to an link::Classes/Event::: code::Ref((numActions\: <val>, activeActions\: <val>))::. This model reflects the number of actions resp. active actions as displayed in the 'actions'-button of the widget.
::

returns:: an link::Classes/Event::

METHOD:: midiOscEnv
Get the current MIDI-/OSC-environment of the widget. If the widget is a link::Classes/CVWidget2D:: calling this method will return an link::Classes/Event:: containing the environments in 2 slots: code::\lo:: and code::\hi::, else the environment will be returned:
definitionList::
	## oscMapping || input- to output-mapping of the values coming from the link::Classes/OSCresponder::\: either code::\linlin::, code::\linexp::, code::\explin:: or code::\expexp:: (see also: link::#-setOscMapping::). By default the entry will be code::\linlin::.
	## oscMsgIndex || if an link::Classes/OSCresponder:: is present this will reflect the index of the message at which the values are received (see also: link::#-oscConnect::).
	## calibConstraints || if an link::Classes/OSCresponder:: is present this will reflect the current constraints for values coming in via OSC. Usually the constraints are set automatically by the widget's internal calibration-mechanism. However, you may set them manually by link::#-setOscInputConstraints:: or deactivate the calibration-mechanism by link:: #-setCalibrate::.
	## oscResponder || if an if an link::Classes/OSCresponder:: is present it will be stored under this slot.
	## midiResponder || if a link::Classes/CCResponder:: is present it will stored under this slot.
::

returns:: an link::Classes/Event::

METHOD:: widgetCV
The widget's link::Classes/CV::. If the widget is a link::Classes/CVWidget2D:: an link::Classes/Event::, containing to slots code::\lo:: and code::\hi:: is returned.

returns:: either a link::Classes/CV:: ( link::Classes/CVWidgetKnob::) or an link::Classes/Event:: ( link::Classes/CVWidget2D::)

METHOD:: wdgtActions
All actions (active and inactive) specified for the given widget.
warning:: Though this has to be a setter/getter for some reason. strong::Do not attempt to set an action like:: code::myWidget.wdgtActions_(some action)::. Rather use link::#-addAction::, link::#-removeAction:: resp. link::#-activateAction::
::

returns:: an link::Classes/Event::, containing active and inactive actions of a widget.

METHOD:: alwaysPositive
If code::\explin:: or code::\expexp:: has been chosen for input to output mapping with link::#-setOscMapping:: both constraints of the input-range have to be same-signed - otherwise the operation would produce code::NaN::s. code::alwaysPositive:: will be calculated automatically, so the user shouldn't have to worry about it.

returns:: the receiver

PRIVATE:: initControllersAndModels
private:: initControllerActions
private:: prInitSpecControl
private:: prInitMidiConnect
private:: prInitMidiDisplay
private:: prInitMidiOptions
private:: prInitCalibration
private:: prInitOscConnect
private:: prInitOscDisplay
private:: prInitOscInputRange
private:: prInitActionsControl

subsection:: Extending the API
warning::The following features are experimental and one should study the internal workings of CVWidget closely before using them - especially the structure of controllers and models: link::#-wdgtControllersAndModels::.
::
Within a CVWidget the functionality of most of its methods is implemented within a MVC-paradigm (strong::m::odel-strong::v::iew-strong::c::ontroller) which means that rather than executing an action within a method directly the method updates a model (an object keeping some data) and triggers the controller via a 'changed'-message (non-working example-code):

code::myModel.value_(someValue).changed(\key)::

When the 'changed'-message is sent the controller will execute its action. By default there is only one key specified: code::\default:: (see link::#-synchKeys::). However, it is possible to extend the functionality of a controller with one or more custom code::key/function:: pairs which means one can sync custom-guis and its elements to a given CVWidget (e.g. a button in some GUI cannot only connect MIDI or OSC but can also immediatly reflect the current connection-status).
Have a look at the examples-section for a simple example. Extending the API in the suggested way should keep the CVWidget-functionality unobstrusive!

code::
// create a widget
~knob = CVWidgetKnob(bounds: Rect(490, 0, 80, 210)).front;

// create a window that displays properties of OSC-connections in ~knob
(
~win = Window("model", Rect(100, 100, 400, 40)).front;
~responderDisplay = StaticText(~win, Rect(7, 7, ~win.bounds.width-14, ~win.bounds.height-14))
.background_(Color.white)
.font_(Font("Andale Mono", 10));
)


// a simple monitor displaying changed models
/*
   models used in CVWidget are:
   calibrate, cvSpec, oscInputRange,
   oscConnection, oscDisplay
   midiConnection, midiDisplay
   midiOptions, actions

   have a look at the section 'wdgtControllersAndModels'
   for more information
*/

/*
   not to be used with CVWidget:-extend:
   mapConstrainterLo, mapConstrainterHi
*/

// the function within extend will be put in any possible controller
// thus whenever one of them is triggered something will be displayed

(
~knob.extend(\mySync, { |theChanger, what, more|
	// have a look at what's being passed into the models
	~responderDisplay.string_(" model changed:"+theChanger.value);
})
)

// remove the previously added functionality
// the window is no longer synched with the CVWidget

~knob.reduce(\mySync);
~win.close;
::

A slightly more practical (but also more complex) example: Edit an OSC-connection.

code::
(
var flow, staticTextFont, textFieldFont, buttonFont;

// create a widget
~knob = CVWidgetKnob(bounds: Rect(490, 0, 80, 210)).front;

// another window with a button that shall get synched to the widget
staticTextFont = Font("Arial", 12);
textFieldFont = Font("Andala Mono", 12);
buttonFont = Font("Arial", 14, true);

// the window and its elements
~win = Window("connect OSC", Rect(50, 100, 400, 100));

~win.view.decorator = flow = FlowLayout(~win.view.bounds, 7@7, 2@2);

StaticText(~win.view, 120@20).string_("IP-address").font_(staticTextFont);
StaticText(~win.view, 50@20).string_("port").font_(staticTextFont);
StaticText(~win.view, 170@20).string_("command-name").font_(staticTextFont);
StaticText(~win.view, flow.indentedRemaining.width@20).string_("slot").font_(staticTextFont);

flow.nextLine;

~ip = TextField(~win.view, 120@20).font_(textFieldFont).string_("192.168.1.23");
~port = NumberBox(~win.view, 50@20).font_(textFieldFont).value_(11111);
~cmd = TextField(~win.view, 170@20).font_(textFieldFont).string_("/my/osc/command/name");
~slot = NumberBox(~win.view, flow.indentedRemaining.width@20).font_(textFieldFont).value_(1).clipLo_(1);

flow.nextLine;

// a button that lets the user connect OSC
~connect = Button(~win.view, flow.indentedRemaining.width@flow.indentedRemaining.height)
.states_([
	["connect OSC", Color.white, Color.blue],
	["", Color.white, Color.red]
])
.font_(buttonFont)
.action_({ |b|
	switch(b.value,
		1, { ~knob.oscConnect(~ip.string, ~port.value, ~cmd.string, ~slot.value) },
		0, { ~knob.oscDisconnect }
	)
});
~win.front;

// extend the widget's controller
// we only need the controller 'oscConnection
~knob.extend(\oscConnectSync, { |theChanger, what, more|
	// on calling ~knob.oscConnect theChanger.value will contain an array with 4 slots:
	// the IP-address, port, the command-name, the message-slot
	// on calling ~knob.oscDisconnect theChanger.value will only contain 'false'
	if(theChanger.value.size == 4, {
		theChanger.value.postln;
		~connect.states_([
			~connect.states[0],
			["connected: %, %, %, %".format(*theChanger.value), ~connect.states[1][1], ~connect.states[1][2]]
		]).value_(1)
	}, {
		~connect.states_([
			["re-connect OSC", ~connect.states[0][1], ~connect.states[0][2]],
			~connect.states[1]
		]).value_(0)
	})
}, \oscConnection)
)

// the user may also establish connect/disconnect programmatically
// ~knob as well as the custom window ~win should reflect changes immediately
~knob.oscConnect("192.168.1.23", 11111, "/my/osc/command/name", 1);
~knob.oscDisconnect;

// clean up
~knob.reduce(\oscConnectSync);
[~knob, ~win].do(_.close);
::


METHOD:: extend
adds a custom function to one or all of the widget's internal link::Classes/SimpleController::s. These can also keep references to user-defined GUIs resp. their elements, thus allowing the user to synch his/her GUIs with CVWidgets.

argument:: key
a link::Classes/Symbol:: or a link::Classes/String:: - mandatory, used internally by the widget's link::Classes/SimpleController::s

argument:: func
a link::Classes/Function:: - mandatory. A custom function, extending the widget's resp. your custom GUI's functionality. The user may pass the content of the model, the key and more to the function if they are stated as arguments at the beginning of the function. See the link::Classes/SimpleController::-helpfile for more info.

argument:: ... controllers
Controllers, given as link::Classes/Symbol::s or link::Classes/String::s. A CVWidget contains several models and controllers, contained in link::#-wdgtControllersAndModels::. If no specific controllers are given the function will be added to strong::all:: controllers within link::#-wdgtControllersAndModels::. If one or more specific controllers are provided the function will only be added to these controllers which might make calculations a bit cheaper. However, if the user provides a specific controller (s)he should know under which circumstances the given controller is being triggered in order to get the desired result.

returns:: the receiver

METHOD:: reduce
removes user-defined functions that have been added to the widget's inbuilt link::Classes/SimpleController::s.

argument:: key
a link::Classes/Symbol:: or a link::Classes/String:: - indicating which function shall be removed. Will not touch the default functionality of a CVWidget. If no key is given all functions added by the user will be removed.

returns:: the receiver

METHOD:: synchKeys
an link::Classes/Array:: of link::Classes/Symbol::s, keeping the keys over which a link::Classes/SimpleController:: within a CVWidget will iterate. By default it is code::[ \default ]::. The user should not alter this directly as adding and removing keys is handled within link::#-extend:: resp. link::#-reduce::.

returns:: an link::Classes/Array:: of link::Classes/Symbol::s

subsection:: GUI properties and methods
optional - CVWidget implements a few GUI-elements that are common to link::Classes/CVWidgetKnob:: as well as link::Classes/CVWidget2D::. Descriptions of the rest of the elements can be found in the documentation for the regarding classes.

METHOD:: window
The window containing the widget

returns:: a link::Classes/Window::

METHOD:: guiEnv
An link::Classes/Event:: containing certain elements of the GUI.

returns:: an link::Classes/Event::

METHOD:: front
Sends the widget's window to front.

returns:: the receiver

METHOD:: editor
Every widget has one or more editors that will open in a new window ( link::Classes/CVWidgetKnob:: 1 editor, link::Classes/CVWidget2D:: 2 editors - code::\lo:: and code::\hi::). This method returns a reference to them.

returns:: a link::Classes/CVWidgetEditor:: or an link::Classes/Event::, containing a reference two 2 or more link::Classes/CVWidgetEditor::s

private:: bgColor

METHOD:: widgetBg
A link::Classes/UserView:: upon which all other elements of the GUI will be placed

returns:: a link::Classes/UserView::

METHOD:: label
A button, containing the name of the widget. When clicked the widget will switch to a link::Classes/TextView:: that can be used to write down notices.

returns:: a link::Classes/Button::

METHOD:: nameField
A link::Classes/TextView:: that can be used to write down notices.

returns:: a link::Classes/TextView::

METHOD:: toggleComment
Toggles between code::nameField:: and the regular widget-appearance.

argument:: visible
a link::Classes/Boolean::

returns:: the receiver

METHOD:: widgetXY
Sets/gets the XY-position of a widget within its parent window.

argument:: point
a link::Classes/Point::

returns:: a link::Classes/Point::

METHOD:: widgetProps
Returns the width/height of a widget as link::Classes/Point::.

returns:: a link::Classes/Point::

METHOD:: bounds
Returns the bounds of a widget as link::Classes/Rect::.

returns:: a link::Classes/Rect::

METHOD:: remove
Removes all GUI-elements (buttons, text-fields, sliders etc.) from a widget.

returns:: the receiver

METHOD:: close
If the widget is part of the CVCenter-GUI all its elements will be removed, otherwise close the widget.

returns:: the receiver

METHOD:: isClosed

returns:: code::true:: if the widget has been closed, otherwise code::false::

EXAMPLES::
subsection:: basic usage
code::
// create some simple CVWidget
~twoDee = CVWidget2D.new.front;

// define an action to be executed when the knob is turned
~twoDee.addAction(\post, { |cv| "current value[lo]: %\n".postf(cv.value) }, \lo);
~twoDee.addAction(\post, { |cv| "current value[hi]: %\n".postf(cv.value) }, \hi);

// some noise
(
Server.default.waitForBoot{
	~noise = { |trigFreq=10, freqMod=0|
		var trig, seq, freq;
		trig = Impulse.kr(trigFreq);
		seq = Drand([Dseq((1..5).mirror1, 1), Drand((4..10), 8)], 2000);
		freq = Demand.kr(trig, 0, seq * 100);
		SinOsc.ar(freq + [0,0.7]).cubed.cubed.scaleneg(freqMod) * 0.1;
	}.play
}
)

// add another action to set trigFreq in ~noise
~twoDee.addAction(\trigFreq, { |cv| ~noise.set(\trigFreq, cv.value) }, \lo);

// change the widget's spec to something nore suitable
// a linear ControlSpec, reaching from 10 to 30
~twoDee.setSpec(#[10, 30], \lo);

// add another action to set freqMod in ~noise
~twoDee.addAction(\trigFreq, { |cv| ~noise.set(\freqMod, cv.value) }, \hi);

// change the widget's spec to something nore suitable
// a spec can be set as the spec's name which automatically gets converted
// to a ControlSpec if a spec under that name exists - see the ControlSpec helpfile
~twoDee.setSpec(\pan, \hi);

// deactivate posting values to the post-window
// the action can be reactivated at any time with the same
// method-call, providing true as its parameter
~twoDee.activateAction(\post, false, \lo);
~twoDee.activateAction(\post, false, \hi);

~noise.free;
~twoDee.close;
::

subsection:: reusable widgets
By default windows created in SC lack the ability to be opened again once they're closed (even evaluating the variable under which the window has been created will still return the window). The following section describes a workaround in CVWidget (resp. link::Classes/CVWidgetKnob:: and link::Classes/CVWidget2D::) that enables the user to keep a widget's responders and open and close it as many times as the user needs to ( strong::open:: is implemented in link::Classes/CVWidgetKnob#-open#CVWidgetKnob:: and link::Classes/CVWidget2D#-open#CVWidget2D::).
code::
// create some widgets
// if a widget is made 'persistent' its OSC-/MID-responders
// will not be removed when the widget gets closed
~knob = CVWidgetKnob(bounds: Rect(490, 0, 80, 210), persistent: true).front;
~twoDee = CVWidget2D(bounds: Rect(330, 0, 140, 210), persistent: true).front;

// make some noise
Server.default.waitForBoot{ ~noise = { SinOsc.ar(\freq.kr([0, 0]), mul: \amp.kr) }.play };

// set various properties of the widgets
~knob.setMidiMode(1).setCtrlButtonBank(16).addAction(\setAmp, { |cv| ~noise.set(\amp, cv.value) });
#[lo, hi].do({ |hilo| ~twoDee.setSpec(#[20, 220, \exp], hilo).setOscMapping(\linexp, hilo).setMidiMode(1, hilo).setCtrlButtonBank(16, hilo) });
~twoDee.addAction(\setFreq, { |cv| ~noise.setn(\freq, [cv.value, ~twoDee.widgetCV.hi.value]) }, \lo);
~twoDee.addAction(\setFreq, { |cv| ~noise.setn(\freq, [~twoDee.widgetCV.lo.value, cv.value]) }, \hi);

// close the widgets and open them again
// note: rather than simply opening them you should re-assign while opening them
// as the open-method always returns a new widget but it will keep properties,
// actions, responders etc. of the old one
~knob = ~knob.open;
~twoDee = ~twoDee.open;
::
