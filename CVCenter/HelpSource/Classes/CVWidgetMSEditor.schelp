TITLE:: CVWidgetMSEditor
summary:: a GUI for editing widgets and their parameters: specs, MIDI, OSC, actions...
categories:: Undocumented classes
related:: Classes/AbstractCVWidgetEditor, Classes/CVWidgetEditor, Classes/CVCenter, Classes/CV, Classes/CVWidget, Classes/CVWidgetKnob, Classes/CVWidget2D, Classes/CVWidgetMS, Classes/CCResponder, Classes/OSCresponderNode, Classes/SimpleController, Classes/ControlSpec, Classes/OSCCommands

DESCRIPTION::
A special editor for link::Classes/CVWidgetMS::: As this widget allows connecting to an arbitrary number of control-slots at once this editor is designed to allow the user to make batch-connections as well as it provides the possibility to edit each slot individually. MIDI and OSC tabs within the interface are divided into an area that allows batch editing and an area that comprehends links to  link::Classes/CVWidgetEditor::s for each slot. Each slot can be connected to an external OSC- or MIDI-controller individually.


CLASSMETHODS::

METHOD:: new
Open a new editor for code::widget::

argument:: widget
the widget-object: must be a link::CVWidgetMS::.

argument:: tab
an link::Classes/Integer::, specifying which tab of the editor shall be focused upon opening the editor. Each editor contains 4 tabs ( see also link::Classes/TabbedView2::): "Spec", "MIDI", "OSC" and "Actions", each addressed by an integer value from code::0:: to code::3::

returns:: a code::CVWidgetMSEditor::

INSTANCEMETHODS::
subsection:: Common GUI properties and methods
subsection:: The "MIDI"-Tab

METHOD:: midiTabs
Every editor provides the possibility to either batch-edit or edit MIDI-connections individually. For convenience these 2 possibilities are represented within 2 tabs:
numberedlist::
## the batch-editing tab.
## the tab containing editable MIDI-connections for each slot in the widget's multi-slider. 
::

returns:: a link::Classes/TabbedView2::

subsection:: Batch-connecting external MIDI hardware
The CVWidgetMSEditor provides the possibility to batch-connect an number of sliders to external hardware at once. Here's a little howto.
image::midi_batch_connect.png::
The numbered fields in the above screenshot provide the following:
numberedlist::
## strong::MIDI init-button:: (link::Classes/AbstractCVWidgetEditor#midiInitBut::) - after MIDI has successfully been initialized the originally red button will turn green and the
## strong::MIDI-source:: (link::Classes/AbstractCVWidgetEditor#midiSourceSelect::) - a dropdown-menu that will let the user select among possible MIDI-sources
## strong::MIDI-source field:: (link::AbstractCVWidgetEditor#midiSrcField::) - when a MIDI-source has been selected its numeric ID will be filled into this field. I.e. any connection made within the batch of connection will listen to this particular device. However, this is emphasis::optional:: - if no device has been selected responders will listen to any available device.
## strong::MIDI-channel:: (link::Classes/AbstractCVWidgetEditor#midiChanField::) - another optional field. If no value is set responders will listen on any channel.
## strong::multi-slider offset index:: (link::#msMidiIndexStartField::) - the index of the slider in the multi-slider at which the batch-connection should begin. This affects the multi-slider in the widget only, strong::not:: the external hardware.
## strong::array of external controllers to be connected:: (link::#extMidiCtrlArrayField::) - within this array the external controller numbers get set. That can be a successive range of values (e.g. code::(0..8)::) or even concetenated arrays (e.g. code::(0..3)++[5, 6, 8, 9]::).
::

Behind the scenes a batch-connection is accomplished by an algorithm like the following:
code::
<array of ctrl.-nrs.>.do({ |ctrlNum, sl|
	<widget>.midiConnect(<MIDI device ID>, <MIDI channel>, ctrlNum, sl+<multi-slider offset index>)
})
::
The above code should guarantee that not only controllers get connected to successive sliders but also an offset is possible.

For further reference: link::Classes/CVWidget#midiConnect::

METHOD:: oscTabs
Like the MIDI-tab the OSC-tab is organized in 2 tabs:
numberedlist::
## the batch-editing tab.
## the tab containing editable MIDI-connections for each slot in the widget's multi-slider. 
::

returns:: a link::Classes/TabbedView2::

private:: midiFlow1
private:: init
private:: amendActionsList

METHOD:: msMidiIndexStartField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: oscEditBtns
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiEditGroups
(describe method here)

returns:: (describe returnvalue here)

METHOD:: close
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiDisconnectorBut
(describe method here)

returns:: (describe returnvalue here)

METHOD:: intStartIndexField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: oscCalibBtns
(describe method here)

returns:: (describe returnvalue here)

METHOD:: extOscCtrlArrayField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: extMidiCtrlArrayField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiConnectorBut
(describe method here)

returns:: (describe returnvalue here)

METHOD:: oscDisconnectorBut
(describe method here)

returns:: (describe returnvalue here)

METHOD:: oscFlow1
(describe method here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::