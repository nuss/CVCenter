TITLE:: AbstractCVWidgetEditor
summary:: the abstract superclass for CVWidgetEditor and CVWidgetMSEditor
categories:: GUI, Conductor, External Control>MIDI, External Control>OSC
related:: Classes/CVWidgetEditor, Classes/CVWidgetMSEditor, Classes/CVCenter, Classes/CV, Classes/CVWidget, Classes/CVWidgetKnob, Classes/CVWidget2D, Classes/CVWidgetMS, Classes/CCResponder, Classes/OSCresponderNode, Classes/SimpleController, Classes/ControlSpec, Classes/OSCCommands
DESCRIPTION::
link::Classes/CVWidgetEditor:: and link::Classes/CVWidgetMSEditor:: let you edit a link::Classes/CVWidget::s properties in a GUI. code::AbstractCVWidgetEditor:: as abstract superclass of both classes provides those for both classes.

CLASSMETHODS::

METHOD:: allEditors
An link::Classes/Event:: containing the currently opened editors, widget-names are kept in the keys:
definitionlist::
## CVWidgetKnob || - the editor itself is stored in code::allEditors[\editor]::
## CVWidget2D || - both, code::\lo:: and code::\hi::, have their own editor: code::allEditors[\hi or \lo][\editor]::
## CVWidgetMS || - the global editor (a link::Classes/CVWidgetMSEditor::) and the sub-editors (all link::Classes/CVWidgetEditor::s) are stored in code::allEditors::: in code::allEditors[<index>][\editor]:: all sub-editors (link::Classes/CVWidgetEditor::s for each slot) are stored, code::allEditors[\editor]:: keeps the global link::Classes/CVWidgetMSEditor::.
::  

returns:: an link::Classes/IdentityDictionary::

METHOD:: shortcuts
An link::Classes/IdentityDictionary:: containing all currently defined shortcuts for any CVWidget(MS)Editor. Though this is a getter/setter it is recomended to add/remove shortcuts via the GUI within the link::Classes/CVCenterPreferences##preferences-interface:: (changes will become active after recompilation of the class-library) or the link::Classes/CVCenterShortcutsEditor##shortcuts-interface:: (changes become active immediatly but get reset after recompilation of the class-library).

note:: In order to change an existing shortcut it is not enough to update the shortcuts-classvar. The user will also have to call link::#setShortcuts:: once.::

returns:: an link::Classes/IdentityDictionary::

private:: initClass

INSTANCEMETHODS::

METHOD:: front
Bring the editor given by the receiver to front.

ARGUMENT:: tab
the tab-index to be focused when the editor is sent to front:
list::
## code::0:: - the "Spec"-tab
## code::1:: - the "MIDI"-tab
## code::2:: - the "OSC"-tab
## code::3:: - the "Actions"-tab 
::

returns:: a link::Classes/CVWidgetEditor:: or a link::Classes/CVWidgetMSEditor::

METHOD:: isClosed
Return a link::Classes/Boolean::, indicating whether the editor is closed (the widget emphasis::must:: have been opened previously)

returns:: a link::Classes/Boolean::

subsection:: Shortcuts-related methods

METHOD:: setShortcuts
After the link::#*shortcust:: have been set this method must be called in order to make them active (if shortcuts have been set via GUI this will be handled internally).

returns:: a link::Classes/CVWidgetEditor:: or a link::Classes/CVWidgetMSEditor::

METHOD:: scv
An link::Classes/Event:: containing various objects that do not necessarily belong to the widget-editor but are related to it. E.g. when a shortcut opens a window that window may be added to scv so other shortcuts can refer to it later. 
Basically code::scv:: has been introduced as the concept of configurable shortcuts seperate shortcut-actions from the widget-editor. Hence, variables in these actions can't get initialized belonging to the widget-editor automatically. However, code::scv:: holding a dictionary that can be filled up later solves the problem.

returns:: an link::Classes/Event::

subsection:: GUI properties and elements
The following methods return representations of elements that are common to link::Classes/CVWidgetEditor:: as well as link::Classes/CVWidgetMSEditor:: 

METHOD:: portRestrictor
A checkbox, forcing the OSC-responder to listen to a specific port only.

returns:: a link::Classes/CheckBox:: (Qt) or a link::Classes/Button:: faking a checkbox (Cocao)

METHOD:: nameField
A link::Classes/TextField::, allowing to set an OSC command-name (e.g. code::/my/cmd/name::). This field will get filled out with a meaningful name if one's selected from the 'command-names' drop-down.

returns:: a link::Classes/TextField::

METHOD:: specsList
a link::Classes/PopUpMenu:: (drop-down), allowing to select from the list of predefined link::Classes/ControlSpec::s, setting the widget's link::Classes/CV::'s spec to the selected one.

returns:: a link::Classes/PopUpMenu::

METHOD:: midiSrcField
(...)

returns:: (describe returnvalue here)

METHOD:: alwaysPosField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiResolutionNB
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiModeSelect
(describe method here)

returns:: (describe returnvalue here)

METHOD:: calibBut
(describe method here)

returns:: (describe returnvalue here)

METHOD:: cmdListMenu
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiCtrlField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: connectorBut
(describe method here)

returns:: (describe returnvalue here)

METHOD:: specField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiMeanNB
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiSourceSelect
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiChanField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: window
(describe method here)

returns:: (describe returnvalue here)

METHOD:: deviceListMenu
(describe method here)

returns:: (describe returnvalue here)

METHOD:: specsListSpecs
(describe method here)

returns:: (describe returnvalue here)

METHOD:: actionsList
(describe method here)

returns:: (describe returnvalue here)

METHOD:: indexField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: ctrlButtonBankField
(describe method here)

returns:: (describe returnvalue here)

METHOD:: mappingSelect
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiLearnBut
(describe method here)

returns:: (describe returnvalue here)

METHOD:: deviceDropDown
(describe method here)

returns:: (describe returnvalue here)

METHOD:: softWithinNB
(describe method here)

returns:: (describe returnvalue here)

METHOD:: tabs
(describe method here)

returns:: (describe returnvalue here)

METHOD:: midiInitBut
(describe method here)

returns:: (describe returnvalue here)


EXAMPLES::

code::
(some example code)
::